generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Accounts {
  userId                Int                @id @default(autoincrement())
  uid                   String             @unique @db.VarChar(100)
  provider              String             @db.VarChar(100)
  firstName             String             @db.VarChar(150)
  middleName            String?            @db.VarChar(150)
  lastName              String             @db.VarChar(150)
  gender                String?            @default("male") @db.VarChar(6)
  email                 String             @unique @db.VarChar(255)
  phoneNumber           String?            @db.VarChar(10)
  isActive              Boolean            @default(false)
  superuser             Boolean            @default(false)
  officer               Boolean            @default(false)
  approvals             BusinessApproval[]
  notifications         Notifications[]
  businessRegistrations BusinessRegistry[]
  businessRenewals      BusinessRenewal[]
  buildingPermits       BuildingPermit[]
  buildingApprovals     BuildingApproval[]
  roles                 Roles[]
  realEstate            RealEstate[]
}

model Roles {
  roleId    Int      @id @default(autoincrement())
  accountId Int
  role      String   @db.VarChar(100)
  account   Accounts @relation(fields: [accountId], references: [userId], onDelete: Cascade)
}

model ZoneClassification {
  zoneId        Int              @id @default(autoincrement())
  zoneCode      String           @unique @db.VarChar(20)
  zoneBase      String           @db.VarChar(100)
  businessTypes BusinessTypes[]
  bounderies    ZoneBounderies[]
}

model ZoneOverlay {
  overlayId   Int              @id @default(autoincrement())
  overlayCode String           @unique @db.VarChar(20)
  overlayBase String           @db.VarChar(200)
  bounderies  ZoneBounderies[]
}

model ZoneBounderies {
  areaId      Int                @id @default(autoincrement())
  street      String             @db.VarChar(255)
  barangay    String             @db.VarChar(200)
  zoneId      Int
  overlayId   Int
  zoneOverlay ZoneOverlay        @relation(fields: [overlayId], references: [overlayId])
  zone        ZoneClassification @relation(fields: [zoneId], references: [zoneId])
}

model BusinessTypes {
  typeId   Int                @id @default(autoincrement())
  typeName String             @db.VarChar(255)
  zoneId   Int
  zone     ZoneClassification @relation(fields: [zoneId], references: [zoneId])
  services BusinessServices[]
}

model BusinessRegistry {
  businessId         Int                  @id @default(autoincrement())
  registrationNumber String               @db.VarChar(20)
  TIN                String               @db.VarChar(20)
  businessName       String               @db.VarChar(200)
  tradeName          String               @db.VarChar(200)
  telephone          String               @db.VarChar(15)
  mobile             String               @db.VarChar(10)
  email              String               @db.VarChar(150)
  website            String?              @db.VarChar(200)
  orgType            String               @db.VarChar(50)
  filipinoEmployees  Int
  foreignEmployees   Int
  businessArea       Decimal              @db.Decimal(7, 2)
  totalFloors        Int
  maleEmployees      Int
  femaleEmployees    Int
  totalEmployees     Int
  lguEmployees       Int
  deliveryUnits      Int
  activity           String               @db.VarChar(50)
  capital            Decimal              @db.Decimal(12, 2)
  taxIncentive       Boolean              @default(false)
  rented             Boolean              @default(false)
  submittedAt        DateTime             @default(now()) @db.Timestamptz(6)
  certificateId      String?              @db.VarChar(20)
  certificateFile    String?              @db.VarChar(255)
  approved           Boolean              @default(false)
  archived           Boolean              @default(false)
  trackNumber        Int?
  quarterPayment     Boolean              @default(false)
  userId             Int
  userAccount        Accounts             @relation(fields: [userId], references: [userId], onDelete: SetNull)
  addresses          BusinessAdresses[]
  appointment        BusinessAppointment?
  approvals          BusinessApproval[]
  owners             BusinessOwners[]
  payments           BusinessPayments[]
  services           BusinessServices[]
  files              Files[]
  renewal            BusinessRenewal[]
}

model BusinessOwners {
  ownerId     Int               @id @default(autoincrement())
  surname     String            @db.VarChar(150)
  givenName   String            @db.VarChar(150)
  middleName  String            @db.VarChar(150)
  suffix      String?           @db.VarChar(3)
  owner       Boolean
  citizenship String?           @db.VarChar(50)
  gender      String            @default("male") @db.VarChar(6)
  businessId  Int
  addressId   Int?              @unique
  address     BusinessAdresses? @relation(fields: [addressId], references: [addressId])
  business    BusinessRegistry  @relation(fields: [businessId], references: [businessId], onDelete: Cascade)

  @@index([businessId], map: "business_owners_business_id")
}

model BusinessAdresses {
  addressId  Int              @id @default(autoincrement())
  bldgNumber String           @db.VarChar(50)
  street     String           @db.VarChar(255)
  barangay   String           @db.VarChar(200)
  city       String           @db.VarChar(100)
  province   String           @db.VarChar(100)
  postalCode Int
  latitude   Decimal?         @db.Decimal(11, 7)
  longitude  Decimal?         @db.Decimal(11, 7)
  mainOffice Boolean          @default(false)
  businessId Int
  business   BusinessRegistry @relation(fields: [businessId], references: [businessId], onDelete: Cascade)
  owners     BusinessOwners?

  @@index([businessId], map: "business_address_business_id")
}

model Files {
  fileId       Int              @id @default(autoincrement())
  fileName     String           @db.VarChar(150)
  fileURL      String           @db.VarChar(255)
  documentType String           @db.VarChar(50)
  businessId   Int
  submittedAt  DateTime         @default(now()) @db.Timestamptz(6)
  business     BusinessRegistry @relation(fields: [businessId], references: [businessId], onDelete: Cascade)

  @@index([businessId], map: "files_business_id")
}

model BusinessServices {
  serviceId      Int              @id @default(autoincrement())
  productService String           @db.VarChar(255)
  psicCode       String?          @db.VarChar(10)
  businessTypeId Int
  businessId     Int
  business       BusinessRegistry @relation(fields: [businessId], references: [businessId], onDelete: Cascade)
  businessType   BusinessTypes    @relation(fields: [businessTypeId], references: [typeId], onDelete: SetNull)

  @@index([businessId], map: "business_services_business_id")
}

model BusinessApproval {
  approvalId   Int              @id @default(autoincrement())
  businessId   Int
  approved     Boolean          @default(false)
  approvalType String           @db.VarChar(50)
  approvedAt   DateTime         @default(now()) @db.Timestamptz(6)
  officialId   Int
  remarks      String?          @db.VarChar(255)
  required     Boolean          @default(true)
  approvalFee  Decimal?         @db.Decimal(12, 2)
  business     BusinessRegistry @relation(fields: [businessId], references: [businessId], onDelete: Cascade)
  official     Accounts         @relation(fields: [officialId], references: [userId], onDelete: SetNull)

  @@index([businessId], map: "business_approval_business_id")
}

model BusinessPayments {
  paymentId     Int              @id @default(autoincrement())
  amount        Decimal          @db.Decimal(12, 2)
  paid          Boolean          @default(false)
  newBusiness   Boolean
  issuedAt      DateTime         @default(now()) @db.Timestamptz(6)
  transactionId String?          @db.VarChar(200)
  paidAt        DateTime?
  receipt       String?          @db.VarChar(200)
  rejected      Boolean          @default(false)
  rejectMessage String?          @db.VarChar(200)
  businessId    Int?
  renewalId     Int?
  renewal       BusinessRenewal?  @relation(fields: [renewalId], references: [renewalId], onDelete: SetNull)
  business      BusinessRegistry? @relation(fields: [businessId], references: [businessId], onDelete: SetNull)

}

model BusinessAppointment {
  appointmentId Int              @id @default(autoincrement())
  businessId    Int              @unique
  schedule      DateTime
  claimed       Boolean          @default(false)
  business      BusinessRegistry @relation(fields: [businessId], references: [businessId], onDelete: SetNull)
}

model BusinessRenewal {
  renewalId     Int               @id @default(autoincrement())
  businessId    Int?               
  business      BusinessRegistry? @relation(fields: [businessId], references: [businessId])
  permitNumber  String?           @db.VarChar(20)
  receiptNumber String?           @db.VarChar(20)
  receiptFile   String?           @db.VarChar(200)
  renewAt       DateTime          @default(now()) @db.Timestamptz(6)
  completed     Boolean           @default(false)
  businessName  String?  
  topFile       String?
  certificateId      String?      @db.VarChar(20)
  certificateFile    String?      @db.VarChar(255)
  appointment        DateTime?
  quarterly     Boolean           @default(false)      
  accountId     Int               
  userAccount   Accounts          @relation(fields: [accountId], references: [userId], onDelete: SetNull)  
  payments      BusinessPayments[]
}

model Notifications {
  notifId       Int             @id @default(autoincrement())
  notifSubject  String          @db.VarChar(100)
  notifDesc     String          @db.VarChar(200)
  read          Boolean         @default(false)
  createdAt     DateTime?       @default(now()) @db.Timestamptz(6)
  userId        Int             
  account       Accounts        @relation(fields: [userId], references: [userId], onDelete: SetNull)  
}

model BuildingPermit {
  buildingId          Int             @id @default(autoincrement())
  totalFloorArea      Decimal         @db.Decimal(7, 2)
  estimatedCost       Decimal         @db.Decimal(12, 2)
  proposedDate        DateTime
  dateOfCompletion    DateTime
  occupancyClassified String          @db.VarChar(200)
  numberOfUnits       Int         
  surname             String          @db.VarChar(255)
  givenName           String          @db.VarChar(255)
  middleName          String          @db.VarChar(255)
  suffix              String?         @db.VarChar(255)
  gender              String          @db.VarChar(20)
  citizenship         String?         @db.VarChar(200)
  bldgNumber          String          @db.VarChar(255)
  street              String          @db.VarChar(255)
  barangay            String          @db.VarChar(255)
  city                String          @db.VarChar(255)
  province            String          @db.VarChar(255)
  postalCode          Int
  scopeOfWork         String          @db.VarChar(255)
  buildingUse         String          @db.VarChar(255)
  engineer            String          @db.VarChar(255)
  latitude            Decimal?         @db.Decimal(11, 7)
  longitude           Decimal?         @db.Decimal(11, 7)
  approved            Boolean          @default(false)   
  topFile             String?          @db.VarChar(255)
  trackNumber         Int?
  releaseDate         DateTime?
  certificateFile     String?          @db.VarChar(255)
  userId              Int
  quarterPayment      Boolean           @default(false)
  submittedAt         DateTime ?        @default(now()) @db.Timestamptz(6)
  userAccount         Accounts          @relation(fields: [userId], references: [userId], onDelete: SetNull)          
  files               BuildingFiles[]
  approvals           BuildingApproval[]
  payments            BuildingPayments[]
}

model BuildingFiles {
  fileId       Int              @id @default(autoincrement())   
  buildingId   Int
  fileName     String           @db.VarChar(150)
  fileURL      String           @db.VarChar(255)
  documentType String           @db.VarChar(50)
  submittedAt  DateTime         @default(now()) @db.Timestamptz(6)
  building     BuildingPermit   @relation(fields: [buildingId], references: [buildingId], onDelete: Cascade)
}

model BuildingApproval {
  approvalId   Int              @id @default(autoincrement())
  buildingId   Int
  approved     Boolean          @default(false)
  approvalType String           @db.VarChar(50)
  approvedAt   DateTime         @default(now()) @db.Timestamptz(6)
  officialId   Int
  remarks      String?          @db.VarChar(255)
  required     Boolean          @default(true)
  approvalFee  Decimal?         @db.Decimal(12, 2)
  building     BuildingPermit   @relation(fields: [buildingId], references: [buildingId], onDelete: Cascade)
  official     Accounts         @relation(fields: [officialId], references: [userId], onDelete: SetNull)

  @@index([buildingId], map: "building_approval_building_id")
}

model BuildingPayments {
  paymentId     Int              @id @default(autoincrement())
  amount        Decimal          @db.Decimal(12, 2)
  paid          Boolean          @default(false)
  issuedAt      DateTime         @default(now()) @db.Timestamptz(6)
  transactionId String?          @db.VarChar(200)
  paidAt        DateTime?
  receipt       String?          @db.VarChar(200)
  rejected      Boolean          @default(false)
  rejectMessage String?          @db.VarChar(200)
  buildingId    Int
  building     BuildingPermit   @relation(fields: [buildingId], references: [buildingId], onDelete: Cascade)

  @@index([buildingId], map: "building_payment_building_id")
}

model RealEstate {
  estateId        Int               @id @default(autoincrement())             
  declarationNum  String?           @db.VarChar(20)
  ownerName       String?           @db.VarChar(100)
  receiptFile     String?           @db.VarChar(200)
  submittedAt     DateTime          @default(now()) @db.Timestamptz(6)
  completed       Boolean             @default(false)
  topFile         String?
  certificateId      String?      @db.VarChar(20)
  certificateFile    String?      @db.VarChar(255)
  appointment        DateTime?
  quarterly       Boolean           @default(false)      
  accountId       Int               
  userAccount     Accounts          @relation(fields: [accountId], references: [userId], onDelete: SetNull)  
  payments        RealEstatePayments[]
}

model RealEstatePayments {
  paymentId     Int              @id @default(autoincrement())
  amount        Decimal          @db.Decimal(12, 2)
  paid          Boolean          @default(false)
  issuedAt      DateTime         @default(now()) @db.Timestamptz(6)
  transactionId String?          @db.VarChar(200)
  paidAt        DateTime?
  receipt       String?          @db.VarChar(200)
  rejected      Boolean          @default(false)
  rejectMessage String?          @db.VarChar(200)
  estateId      Int
  realEstate    RealEstate       @relation(fields: [estateId], references: [estateId], onDelete: Cascade)

  @@index([estateId], map: "estate_payment_estate_id")
}